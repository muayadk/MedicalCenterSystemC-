//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MedicalCenterManangement.DataModeView
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MedicalCenterDbEntities : DbContext
    {
        public MedicalCenterDbEntities()
            : base("name=MedicalCenterDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Accounts> Accounts { get; set; }
        public virtual DbSet<activeMaterialTab> activeMaterialTab { get; set; }
        public virtual DbSet<appointmentTab> appointmentTab { get; set; }
        public virtual DbSet<Branch> Branch { get; set; }
        public virtual DbSet<Cash> Cash { get; set; }
        public virtual DbSet<clinicTab> clinicTab { get; set; }
        public virtual DbSet<Coin> Coin { get; set; }
        public virtual DbSet<companySuplierDragTab> companySuplierDragTab { get; set; }
        public virtual DbSet<Constriant> Constriant { get; set; }
        public virtual DbSet<Constriant_Affect> Constriant_Affect { get; set; }
        public virtual DbSet<diagnoseTab> diagnoseTab { get; set; }
        public virtual DbSet<doctorsTab> doctorsTab { get; set; }
        public virtual DbSet<doseTab> doseTab { get; set; }
        public virtual DbSet<dragTab> dragTab { get; set; }
        public virtual DbSet<groupDragTab> groupDragTab { get; set; }
        public virtual DbSet<groupTestTab> groupTestTab { get; set; }
        public virtual DbSet<hospitalCenterTab> hospitalCenterTab { get; set; }
        public virtual DbSet<patientsTab> patientsTab { get; set; }
        public virtual DbSet<prescriptionTab> prescriptionTab { get; set; }
        public virtual DbSet<previewTab> previewTab { get; set; }
        public virtual DbSet<recipeTab> recipeTab { get; set; }
        public virtual DbSet<resultTestTab> resultTestTab { get; set; }
        public virtual DbSet<roles> roles { get; set; }
        public virtual DbSet<samplesTab> samplesTab { get; set; }
        public virtual DbSet<scientificNameDragTab> scientificNameDragTab { get; set; }
        public virtual DbSet<servicesLestTab> servicesLestTab { get; set; }
        public virtual DbSet<servicesRequestTab> servicesRequestTab { get; set; }
        public virtual DbSet<serviecsTab> serviecsTab { get; set; }
        public virtual DbSet<shapeFarmacy> shapeFarmacy { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<testItemTab> testItemTab { get; set; }
        public virtual DbSet<testrRequesTab> testrRequesTab { get; set; }
        public virtual DbSet<testTab> testTab { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<users1> users1 { get; set; }
        public virtual DbSet<visitTab> visitTab { get; set; }
        public virtual DbSet<Cost_Centers> Cost_Centers { get; set; }
        public virtual DbSet<Serial_Table> Serial_Table { get; set; }
        public virtual DbSet<System_Options> System_Options { get; set; }
    
        public virtual int AddDiagnoses(string diCode, string diName, string diDate, string diTime, Nullable<decimal> viId)
        {
            var diCodeParameter = diCode != null ?
                new ObjectParameter("diCode", diCode) :
                new ObjectParameter("diCode", typeof(string));
    
            var diNameParameter = diName != null ?
                new ObjectParameter("diName", diName) :
                new ObjectParameter("diName", typeof(string));
    
            var diDateParameter = diDate != null ?
                new ObjectParameter("diDate", diDate) :
                new ObjectParameter("diDate", typeof(string));
    
            var diTimeParameter = diTime != null ?
                new ObjectParameter("diTime", diTime) :
                new ObjectParameter("diTime", typeof(string));
    
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("viId", viId) :
                new ObjectParameter("viId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDiagnoses", diCodeParameter, diNameParameter, diDateParameter, diTimeParameter, viIdParameter);
        }
    
        public virtual int AddPatient(string paCode, string paFname, string paLname, string paSex, string paBrithday, Nullable<int> paAge, Nullable<int> paMobile1, Nullable<int> paMobile2, byte[] paImg, string paAddress, string paCountry, string paCity, string paBloodType, string paState, string paType, Nullable<decimal> aCC_Num)
        {
            var paCodeParameter = paCode != null ?
                new ObjectParameter("paCode", paCode) :
                new ObjectParameter("paCode", typeof(string));
    
            var paFnameParameter = paFname != null ?
                new ObjectParameter("paFname", paFname) :
                new ObjectParameter("paFname", typeof(string));
    
            var paLnameParameter = paLname != null ?
                new ObjectParameter("paLname", paLname) :
                new ObjectParameter("paLname", typeof(string));
    
            var paSexParameter = paSex != null ?
                new ObjectParameter("paSex", paSex) :
                new ObjectParameter("paSex", typeof(string));
    
            var paBrithdayParameter = paBrithday != null ?
                new ObjectParameter("paBrithday", paBrithday) :
                new ObjectParameter("paBrithday", typeof(string));
    
            var paAgeParameter = paAge.HasValue ?
                new ObjectParameter("paAge", paAge) :
                new ObjectParameter("paAge", typeof(int));
    
            var paMobile1Parameter = paMobile1.HasValue ?
                new ObjectParameter("paMobile1", paMobile1) :
                new ObjectParameter("paMobile1", typeof(int));
    
            var paMobile2Parameter = paMobile2.HasValue ?
                new ObjectParameter("paMobile2", paMobile2) :
                new ObjectParameter("paMobile2", typeof(int));
    
            var paImgParameter = paImg != null ?
                new ObjectParameter("paImg", paImg) :
                new ObjectParameter("paImg", typeof(byte[]));
    
            var paAddressParameter = paAddress != null ?
                new ObjectParameter("paAddress", paAddress) :
                new ObjectParameter("paAddress", typeof(string));
    
            var paCountryParameter = paCountry != null ?
                new ObjectParameter("paCountry", paCountry) :
                new ObjectParameter("paCountry", typeof(string));
    
            var paCityParameter = paCity != null ?
                new ObjectParameter("paCity", paCity) :
                new ObjectParameter("paCity", typeof(string));
    
            var paBloodTypeParameter = paBloodType != null ?
                new ObjectParameter("paBloodType", paBloodType) :
                new ObjectParameter("paBloodType", typeof(string));
    
            var paStateParameter = paState != null ?
                new ObjectParameter("paState", paState) :
                new ObjectParameter("paState", typeof(string));
    
            var paTypeParameter = paType != null ?
                new ObjectParameter("paType", paType) :
                new ObjectParameter("paType", typeof(string));
    
            var aCC_NumParameter = aCC_Num.HasValue ?
                new ObjectParameter("ACC_Num", aCC_Num) :
                new ObjectParameter("ACC_Num", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPatient", paCodeParameter, paFnameParameter, paLnameParameter, paSexParameter, paBrithdayParameter, paAgeParameter, paMobile1Parameter, paMobile2Parameter, paImgParameter, paAddressParameter, paCountryParameter, paCityParameter, paBloodTypeParameter, paStateParameter, paTypeParameter, aCC_NumParameter);
        }
    
        public virtual int AddPrescription(string presCode, string presName, string presQyt, string presTimeUse, string presSize, string presPriod, Nullable<decimal> reId, Nullable<decimal> drId)
        {
            var presCodeParameter = presCode != null ?
                new ObjectParameter("presCode", presCode) :
                new ObjectParameter("presCode", typeof(string));
    
            var presNameParameter = presName != null ?
                new ObjectParameter("presName", presName) :
                new ObjectParameter("presName", typeof(string));
    
            var presQytParameter = presQyt != null ?
                new ObjectParameter("presQyt", presQyt) :
                new ObjectParameter("presQyt", typeof(string));
    
            var presTimeUseParameter = presTimeUse != null ?
                new ObjectParameter("presTimeUse", presTimeUse) :
                new ObjectParameter("presTimeUse", typeof(string));
    
            var presSizeParameter = presSize != null ?
                new ObjectParameter("presSize", presSize) :
                new ObjectParameter("presSize", typeof(string));
    
            var presPriodParameter = presPriod != null ?
                new ObjectParameter("presPriod", presPriod) :
                new ObjectParameter("presPriod", typeof(string));
    
            var reIdParameter = reId.HasValue ?
                new ObjectParameter("reId", reId) :
                new ObjectParameter("reId", typeof(decimal));
    
            var drIdParameter = drId.HasValue ?
                new ObjectParameter("drId", drId) :
                new ObjectParameter("drId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPrescription", presCodeParameter, presNameParameter, presQytParameter, presTimeUseParameter, presSizeParameter, presPriodParameter, reIdParameter, drIdParameter);
        }
    
        public virtual int AddPreview(string prCode, string prName, string prDate, string prTime, string prNote, Nullable<decimal> viId)
        {
            var prCodeParameter = prCode != null ?
                new ObjectParameter("prCode", prCode) :
                new ObjectParameter("prCode", typeof(string));
    
            var prNameParameter = prName != null ?
                new ObjectParameter("prName", prName) :
                new ObjectParameter("prName", typeof(string));
    
            var prDateParameter = prDate != null ?
                new ObjectParameter("prDate", prDate) :
                new ObjectParameter("prDate", typeof(string));
    
            var prTimeParameter = prTime != null ?
                new ObjectParameter("prTime", prTime) :
                new ObjectParameter("prTime", typeof(string));
    
            var prNoteParameter = prNote != null ?
                new ObjectParameter("prNote", prNote) :
                new ObjectParameter("prNote", typeof(string));
    
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("viId", viId) :
                new ObjectParameter("viId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPreview", prCodeParameter, prNameParameter, prDateParameter, prTimeParameter, prNoteParameter, viIdParameter);
        }
    
        public virtual int AddRecipe(string reCode, string reDate, string reTime, string reNote, Nullable<decimal> viId)
        {
            var reCodeParameter = reCode != null ?
                new ObjectParameter("reCode", reCode) :
                new ObjectParameter("reCode", typeof(string));
    
            var reDateParameter = reDate != null ?
                new ObjectParameter("reDate", reDate) :
                new ObjectParameter("reDate", typeof(string));
    
            var reTimeParameter = reTime != null ?
                new ObjectParameter("reTime", reTime) :
                new ObjectParameter("reTime", typeof(string));
    
            var reNoteParameter = reNote != null ?
                new ObjectParameter("reNote", reNote) :
                new ObjectParameter("reNote", typeof(string));
    
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("viId", viId) :
                new ObjectParameter("viId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRecipe", reCodeParameter, reDateParameter, reTimeParameter, reNoteParameter, viIdParameter);
        }
    
        public virtual int AddServiecs(string seCode, string seName, string seType, Nullable<decimal> sePrice, string seNote, Nullable<decimal> aCC_Num)
        {
            var seCodeParameter = seCode != null ?
                new ObjectParameter("seCode", seCode) :
                new ObjectParameter("seCode", typeof(string));
    
            var seNameParameter = seName != null ?
                new ObjectParameter("seName", seName) :
                new ObjectParameter("seName", typeof(string));
    
            var seTypeParameter = seType != null ?
                new ObjectParameter("seType", seType) :
                new ObjectParameter("seType", typeof(string));
    
            var sePriceParameter = sePrice.HasValue ?
                new ObjectParameter("sePrice", sePrice) :
                new ObjectParameter("sePrice", typeof(decimal));
    
            var seNoteParameter = seNote != null ?
                new ObjectParameter("seNote", seNote) :
                new ObjectParameter("seNote", typeof(string));
    
            var aCC_NumParameter = aCC_Num.HasValue ?
                new ObjectParameter("ACC_Num", aCC_Num) :
                new ObjectParameter("ACC_Num", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddServiecs", seCodeParameter, seNameParameter, seTypeParameter, sePriceParameter, seNoteParameter, aCC_NumParameter);
        }
    
        public virtual int AddVisit(string viCode, string viName, string viDate, string viTime, Nullable<decimal> paId, Nullable<decimal> apId, string viNote, Nullable<decimal> doId)
        {
            var viCodeParameter = viCode != null ?
                new ObjectParameter("viCode", viCode) :
                new ObjectParameter("viCode", typeof(string));
    
            var viNameParameter = viName != null ?
                new ObjectParameter("viName", viName) :
                new ObjectParameter("viName", typeof(string));
    
            var viDateParameter = viDate != null ?
                new ObjectParameter("viDate", viDate) :
                new ObjectParameter("viDate", typeof(string));
    
            var viTimeParameter = viTime != null ?
                new ObjectParameter("viTime", viTime) :
                new ObjectParameter("viTime", typeof(string));
    
            var paIdParameter = paId.HasValue ?
                new ObjectParameter("paId", paId) :
                new ObjectParameter("paId", typeof(decimal));
    
            var apIdParameter = apId.HasValue ?
                new ObjectParameter("apId", apId) :
                new ObjectParameter("apId", typeof(decimal));
    
            var viNoteParameter = viNote != null ?
                new ObjectParameter("viNote", viNote) :
                new ObjectParameter("viNote", typeof(string));
    
            var doIdParameter = doId.HasValue ?
                new ObjectParameter("doId", doId) :
                new ObjectParameter("doId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVisit", viCodeParameter, viNameParameter, viDateParameter, viTimeParameter, paIdParameter, apIdParameter, viNoteParameter, doIdParameter);
        }
    
        public virtual int DeleteDiagnoseByUpdate(Nullable<decimal> diId, Nullable<bool> isDeleted)
        {
            var diIdParameter = diId.HasValue ?
                new ObjectParameter("diId", diId) :
                new ObjectParameter("diId", typeof(decimal));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDiagnoseByUpdate", diIdParameter, isDeletedParameter);
        }
    
        public virtual int DeletePatient(Nullable<decimal> paId)
        {
            var paIdParameter = paId.HasValue ?
                new ObjectParameter("paId", paId) :
                new ObjectParameter("paId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePatient", paIdParameter);
        }
    
        public virtual int DeletePrescription(Nullable<decimal> presId)
        {
            var presIdParameter = presId.HasValue ?
                new ObjectParameter("presId", presId) :
                new ObjectParameter("presId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePrescription", presIdParameter);
        }
    
        public virtual int DeletePreviewByUpdate(Nullable<decimal> prId, Nullable<bool> isDeleted)
        {
            var prIdParameter = prId.HasValue ?
                new ObjectParameter("prId", prId) :
                new ObjectParameter("prId", typeof(decimal));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePreviewByUpdate", prIdParameter, isDeletedParameter);
        }
    
        public virtual int DeleteRecipeByUpdate(Nullable<decimal> reId, Nullable<bool> isDeleted)
        {
            var reIdParameter = reId.HasValue ?
                new ObjectParameter("reId", reId) :
                new ObjectParameter("reId", typeof(decimal));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("isDeleted", isDeleted) :
                new ObjectParameter("isDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRecipeByUpdate", reIdParameter, isDeletedParameter);
        }
    
        public virtual int DeleteVisitPatient(Nullable<decimal> viId)
        {
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("viId", viId) :
                new ObjectParameter("viId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVisitPatient", viIdParameter);
        }
    
        public virtual ObjectResult<getAllPatient_Result> getAllPatient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllPatient_Result>("getAllPatient");
        }
    
        public virtual ObjectResult<getAllServiecs_Result> getAllServiecs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllServiecs_Result>("getAllServiecs");
        }
    
        public virtual ObjectResult<getAllVisitPatient_Result> getAllVisitPatient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllVisitPatient_Result>("getAllVisitPatient");
        }
    
        public virtual ObjectResult<getDiagnosePatientByVistID_Result> getDiagnosePatientByVistID(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDiagnosePatientByVistID_Result>("getDiagnosePatientByVistID", idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> getMaxRecipeID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("getMaxRecipeID");
        }
    
        public virtual ObjectResult<getRecipeByRecipeId_Result> getRecipeByRecipeId(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRecipeByRecipeId_Result>("getRecipeByRecipeId", idParameter);
        }
    
        public virtual ObjectResult<getTestResultPatient_Result> getTestResultPatient(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTestResultPatient_Result>("getTestResultPatient", iDParameter);
        }
    
        public virtual ObjectResult<getVisitPatientByID_Result> getVisitPatientByID(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getVisitPatientByID_Result>("getVisitPatientByID", iDParameter);
        }
    
        public virtual ObjectResult<getVisitPatientByName_Result> getVisitPatientByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getVisitPatientByName_Result>("getVisitPatientByName", nameParameter);
        }
    
        public virtual ObjectResult<SearchVisitById_Result> SearchVisitById(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchVisitById_Result>("SearchVisitById", iDParameter);
        }
    
        public virtual ObjectResult<SearchVisitPatient_Result> SearchVisitPatient(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchVisitPatient_Result>("SearchVisitPatient", iDParameter);
        }
    
        public virtual ObjectResult<SearchVisitPatientByDate_Result> SearchVisitPatientByDate(string viDate)
        {
            var viDateParameter = viDate != null ?
                new ObjectParameter("viDate", viDate) :
                new ObjectParameter("viDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchVisitPatientByDate_Result>("SearchVisitPatientByDate", viDateParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateDiagnoses(Nullable<decimal> diId, string diCode, string diName, string diDate, string diTime, Nullable<decimal> viId)
        {
            var diIdParameter = diId.HasValue ?
                new ObjectParameter("diId", diId) :
                new ObjectParameter("diId", typeof(decimal));
    
            var diCodeParameter = diCode != null ?
                new ObjectParameter("diCode", diCode) :
                new ObjectParameter("diCode", typeof(string));
    
            var diNameParameter = diName != null ?
                new ObjectParameter("diName", diName) :
                new ObjectParameter("diName", typeof(string));
    
            var diDateParameter = diDate != null ?
                new ObjectParameter("diDate", diDate) :
                new ObjectParameter("diDate", typeof(string));
    
            var diTimeParameter = diTime != null ?
                new ObjectParameter("diTime", diTime) :
                new ObjectParameter("diTime", typeof(string));
    
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("viId", viId) :
                new ObjectParameter("viId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDiagnoses", diIdParameter, diCodeParameter, diNameParameter, diDateParameter, diTimeParameter, viIdParameter);
        }
    
        public virtual int updatePatient(Nullable<decimal> paId, string paCode, string paFname, string paLname, string paSex, string paBrithday, Nullable<int> paAge, Nullable<int> paMobile1, Nullable<int> paMobile2, byte[] paImg, string paAddress, string paCountry, string paCity, string paBloodType, string paState, string paType, Nullable<decimal> aCC_Num)
        {
            var paIdParameter = paId.HasValue ?
                new ObjectParameter("paId", paId) :
                new ObjectParameter("paId", typeof(decimal));
    
            var paCodeParameter = paCode != null ?
                new ObjectParameter("paCode", paCode) :
                new ObjectParameter("paCode", typeof(string));
    
            var paFnameParameter = paFname != null ?
                new ObjectParameter("paFname", paFname) :
                new ObjectParameter("paFname", typeof(string));
    
            var paLnameParameter = paLname != null ?
                new ObjectParameter("paLname", paLname) :
                new ObjectParameter("paLname", typeof(string));
    
            var paSexParameter = paSex != null ?
                new ObjectParameter("paSex", paSex) :
                new ObjectParameter("paSex", typeof(string));
    
            var paBrithdayParameter = paBrithday != null ?
                new ObjectParameter("paBrithday", paBrithday) :
                new ObjectParameter("paBrithday", typeof(string));
    
            var paAgeParameter = paAge.HasValue ?
                new ObjectParameter("paAge", paAge) :
                new ObjectParameter("paAge", typeof(int));
    
            var paMobile1Parameter = paMobile1.HasValue ?
                new ObjectParameter("paMobile1", paMobile1) :
                new ObjectParameter("paMobile1", typeof(int));
    
            var paMobile2Parameter = paMobile2.HasValue ?
                new ObjectParameter("paMobile2", paMobile2) :
                new ObjectParameter("paMobile2", typeof(int));
    
            var paImgParameter = paImg != null ?
                new ObjectParameter("paImg", paImg) :
                new ObjectParameter("paImg", typeof(byte[]));
    
            var paAddressParameter = paAddress != null ?
                new ObjectParameter("paAddress", paAddress) :
                new ObjectParameter("paAddress", typeof(string));
    
            var paCountryParameter = paCountry != null ?
                new ObjectParameter("paCountry", paCountry) :
                new ObjectParameter("paCountry", typeof(string));
    
            var paCityParameter = paCity != null ?
                new ObjectParameter("paCity", paCity) :
                new ObjectParameter("paCity", typeof(string));
    
            var paBloodTypeParameter = paBloodType != null ?
                new ObjectParameter("paBloodType", paBloodType) :
                new ObjectParameter("paBloodType", typeof(string));
    
            var paStateParameter = paState != null ?
                new ObjectParameter("paState", paState) :
                new ObjectParameter("paState", typeof(string));
    
            var paTypeParameter = paType != null ?
                new ObjectParameter("paType", paType) :
                new ObjectParameter("paType", typeof(string));
    
            var aCC_NumParameter = aCC_Num.HasValue ?
                new ObjectParameter("ACC_Num", aCC_Num) :
                new ObjectParameter("ACC_Num", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatePatient", paIdParameter, paCodeParameter, paFnameParameter, paLnameParameter, paSexParameter, paBrithdayParameter, paAgeParameter, paMobile1Parameter, paMobile2Parameter, paImgParameter, paAddressParameter, paCountryParameter, paCityParameter, paBloodTypeParameter, paStateParameter, paTypeParameter, aCC_NumParameter);
        }
    
        public virtual int UpdatePrescription(Nullable<decimal> presId, string presCode, string presName, string presQyt, string presTimeUse, string presSize, string presPriod, Nullable<decimal> reId, Nullable<decimal> drId)
        {
            var presIdParameter = presId.HasValue ?
                new ObjectParameter("presId", presId) :
                new ObjectParameter("presId", typeof(decimal));
    
            var presCodeParameter = presCode != null ?
                new ObjectParameter("presCode", presCode) :
                new ObjectParameter("presCode", typeof(string));
    
            var presNameParameter = presName != null ?
                new ObjectParameter("presName", presName) :
                new ObjectParameter("presName", typeof(string));
    
            var presQytParameter = presQyt != null ?
                new ObjectParameter("presQyt", presQyt) :
                new ObjectParameter("presQyt", typeof(string));
    
            var presTimeUseParameter = presTimeUse != null ?
                new ObjectParameter("presTimeUse", presTimeUse) :
                new ObjectParameter("presTimeUse", typeof(string));
    
            var presSizeParameter = presSize != null ?
                new ObjectParameter("presSize", presSize) :
                new ObjectParameter("presSize", typeof(string));
    
            var presPriodParameter = presPriod != null ?
                new ObjectParameter("presPriod", presPriod) :
                new ObjectParameter("presPriod", typeof(string));
    
            var reIdParameter = reId.HasValue ?
                new ObjectParameter("reId", reId) :
                new ObjectParameter("reId", typeof(decimal));
    
            var drIdParameter = drId.HasValue ?
                new ObjectParameter("drId", drId) :
                new ObjectParameter("drId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePrescription", presIdParameter, presCodeParameter, presNameParameter, presQytParameter, presTimeUseParameter, presSizeParameter, presPriodParameter, reIdParameter, drIdParameter);
        }
    
        public virtual int UpdatePreview(Nullable<decimal> prId, string prCode, string prName, string prDate, string prTime, string prNote, Nullable<decimal> viId)
        {
            var prIdParameter = prId.HasValue ?
                new ObjectParameter("prId", prId) :
                new ObjectParameter("prId", typeof(decimal));
    
            var prCodeParameter = prCode != null ?
                new ObjectParameter("prCode", prCode) :
                new ObjectParameter("prCode", typeof(string));
    
            var prNameParameter = prName != null ?
                new ObjectParameter("prName", prName) :
                new ObjectParameter("prName", typeof(string));
    
            var prDateParameter = prDate != null ?
                new ObjectParameter("prDate", prDate) :
                new ObjectParameter("prDate", typeof(string));
    
            var prTimeParameter = prTime != null ?
                new ObjectParameter("prTime", prTime) :
                new ObjectParameter("prTime", typeof(string));
    
            var prNoteParameter = prNote != null ?
                new ObjectParameter("prNote", prNote) :
                new ObjectParameter("prNote", typeof(string));
    
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("viId", viId) :
                new ObjectParameter("viId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePreview", prIdParameter, prCodeParameter, prNameParameter, prDateParameter, prTimeParameter, prNoteParameter, viIdParameter);
        }
    
        public virtual int UpdateRecipe(Nullable<decimal> reId, string reCode, string reDate, string reTime, string reNote, Nullable<decimal> viId)
        {
            var reIdParameter = reId.HasValue ?
                new ObjectParameter("reId", reId) :
                new ObjectParameter("reId", typeof(decimal));
    
            var reCodeParameter = reCode != null ?
                new ObjectParameter("reCode", reCode) :
                new ObjectParameter("reCode", typeof(string));
    
            var reDateParameter = reDate != null ?
                new ObjectParameter("reDate", reDate) :
                new ObjectParameter("reDate", typeof(string));
    
            var reTimeParameter = reTime != null ?
                new ObjectParameter("reTime", reTime) :
                new ObjectParameter("reTime", typeof(string));
    
            var reNoteParameter = reNote != null ?
                new ObjectParameter("reNote", reNote) :
                new ObjectParameter("reNote", typeof(string));
    
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("viId", viId) :
                new ObjectParameter("viId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRecipe", reIdParameter, reCodeParameter, reDateParameter, reTimeParameter, reNoteParameter, viIdParameter);
        }
    
        public virtual int UpdateServiecs(Nullable<decimal> seId, string seCode, string seName, string seType, Nullable<decimal> sePrice, string seNote, Nullable<decimal> aCC_Num)
        {
            var seIdParameter = seId.HasValue ?
                new ObjectParameter("seId", seId) :
                new ObjectParameter("seId", typeof(decimal));
    
            var seCodeParameter = seCode != null ?
                new ObjectParameter("seCode", seCode) :
                new ObjectParameter("seCode", typeof(string));
    
            var seNameParameter = seName != null ?
                new ObjectParameter("seName", seName) :
                new ObjectParameter("seName", typeof(string));
    
            var seTypeParameter = seType != null ?
                new ObjectParameter("seType", seType) :
                new ObjectParameter("seType", typeof(string));
    
            var sePriceParameter = sePrice.HasValue ?
                new ObjectParameter("sePrice", sePrice) :
                new ObjectParameter("sePrice", typeof(decimal));
    
            var seNoteParameter = seNote != null ?
                new ObjectParameter("seNote", seNote) :
                new ObjectParameter("seNote", typeof(string));
    
            var aCC_NumParameter = aCC_Num.HasValue ?
                new ObjectParameter("ACC_Num", aCC_Num) :
                new ObjectParameter("ACC_Num", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServiecs", seIdParameter, seCodeParameter, seNameParameter, seTypeParameter, sePriceParameter, seNoteParameter, aCC_NumParameter);
        }
    
        public virtual int UpdateVisit(Nullable<decimal> viId, string viCode, string viName, string viDate, string viTime, Nullable<decimal> paId, Nullable<decimal> apId, string viNote, Nullable<decimal> doId)
        {
            var viIdParameter = viId.HasValue ?
                new ObjectParameter("viId", viId) :
                new ObjectParameter("viId", typeof(decimal));
    
            var viCodeParameter = viCode != null ?
                new ObjectParameter("viCode", viCode) :
                new ObjectParameter("viCode", typeof(string));
    
            var viNameParameter = viName != null ?
                new ObjectParameter("viName", viName) :
                new ObjectParameter("viName", typeof(string));
    
            var viDateParameter = viDate != null ?
                new ObjectParameter("viDate", viDate) :
                new ObjectParameter("viDate", typeof(string));
    
            var viTimeParameter = viTime != null ?
                new ObjectParameter("viTime", viTime) :
                new ObjectParameter("viTime", typeof(string));
    
            var paIdParameter = paId.HasValue ?
                new ObjectParameter("paId", paId) :
                new ObjectParameter("paId", typeof(decimal));
    
            var apIdParameter = apId.HasValue ?
                new ObjectParameter("apId", apId) :
                new ObjectParameter("apId", typeof(decimal));
    
            var viNoteParameter = viNote != null ?
                new ObjectParameter("viNote", viNote) :
                new ObjectParameter("viNote", typeof(string));
    
            var doIdParameter = doId.HasValue ?
                new ObjectParameter("doId", doId) :
                new ObjectParameter("doId", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVisit", viIdParameter, viCodeParameter, viNameParameter, viDateParameter, viTimeParameter, paIdParameter, apIdParameter, viNoteParameter, doIdParameter);
        }
    
        public virtual ObjectResult<getHeaderInformation_Result> getHeaderInformation(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getHeaderInformation_Result>("getHeaderInformation", idParameter);
        }
    
        public virtual ObjectResult<getRecipeByVisitID_Result> getRecipeByVisitID(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRecipeByVisitID_Result>("getRecipeByVisitID", idParameter);
        }
    
        public virtual ObjectResult<getPreviewPatientByVistID_Result> getPreviewPatientByVistID(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPreviewPatientByVistID_Result>("getPreviewPatientByVistID", idParameter);
        }
    
        public virtual ObjectResult<getServicesRequestByVisitID_Result> getServicesRequestByVisitID(Nullable<decimal> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getServicesRequestByVisitID_Result>("getServicesRequestByVisitID", idParameter);
        }
    }
}
